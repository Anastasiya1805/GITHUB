1. На локальном репозитории сделать ветки для:
- Postman 
git branch Postman
- Jmeter 
git branch Jmeter 
- CheckLists 
git branch CheckLists
- Bug Report
git branch Bug Report
- SQL
git branch SQL
- Charles
git branch Charles
- Mobile testing
git branch Mobile testing

2. Запушить все ветки на внешний репозиторий.
git push -u origin Postman
git push -u origin Jmeter
git push -u origin CheckLists
git push -u origin Bug_Report
git push -u origin SQL
git push -u origin Charles
git push -u origin Mobile testing

3. Зайдем в ветку  Bug_Report
git checkout Bug_Report

Создадим файл  
touch bug_report.txt 

Напишем Bug Report в нем
vim bug_report.txt
insert

ID: 1
Summary: На сайте Employers&Employees в меню " Сущности" в подразделах "Region", "Location", "Task", "Job" не удаляются записи
Incident Description: На сайте Employers&Employees в меню "Сущности" в подразделах "Region", "Location", "Task", "Job" не удаляются записи.
Pre-condition: Ресурс https://arcane-cliffs-69468.herokuapp.com/account/settings Открыта страница "Сущности", подаздел "Region".
Steps: 1. Открыть меню "Профиль"
       2. Выбрать меню "Сущности"
       3. Выбрать все подразделы,нажать любой из подразделов "Region", "Location", "Task", "Job"  
       4. Выбрать любую запись
       5. Нажать "Удалить"
Actual result:"Команда ""Удалить запись"" не срабатывает в подразделах "Region", "]"Location", "Task"", "Job"/
Expected result: Команда "Удалить запись" должна работать во всех подразделах меню "Сущности"
Environment: Windous 7, Chrome  93.0.4577.63
Build:
Attempts to repeat: Дефект воспроизводится постоянно
Impact:"Пользователь не может удалить данные, которые ему не требуются"
Severity:3
Priority:3
Attachment

esc :wq(сохранить и выйти)

4. Запушить структуру багрепорта на внешний репозиторий 
Для отслеживания файла 
git add bug_report.txt
git status
Закоммитим:
git commit -m "bug_report.txt"
git push

5. Вмержить ветку Bug Reports в Main
Находимся в ветке Main(git checkout main)
git merge Bug_Report

6. Запушить main на внешний репозиторий. 
git push

7. В ветке CheckLists набросать структуру чек листа.

Зайдем в ветку  CheckLists
git checkout CheckLists

touch CheckLists.txt
vim CheckLists.txt
insert

Checklists
1. Если поле не засеяно, в шапке отображается "поле не засеяно". Сорт и культура не указаны.
2. Если поле не засеяно, в шапке отображается "поле не засеяно". Сорт и культура не указаны.
3. Если поле не засеяно, дата сева и уборки пустые
4. Поле засеяно культурой, в истории культур в поле не указана дата сева и уборки, в админке у культуры есть эти даты по умолчанию -> на карточке поля отобразятся даты из админки
5. Поле засеяно культурой, в истории культур указана дата сева и уборки -> дата сева и уборки отобразится на карточке поля
6.После сворачивания приложения и возвращения к нему общая информация текущего поля отображается.
7. Если у поля нет отчетов в истории, то раздел отчетов (последних событий) на поле пустой с заглушкой-надписью посередине "результатов по данному запросу не найдено"
8. Если у поля есть в истории отчет, то в отчете отображается дата создания отчета	Если у поля есть в истории отчет, то в отчете отображается состояние поля (хорошее/среднее/плохое - проверить для каждого из состояний) кол-во. При этом подсчитывается каждый тип проблемы (проблема определена)
9. Если у поля есть в истории отчет без проблем, то вместо кол-ва выводится "нет проблем"

esc :wq

8. Запушить структуру на внешний репозиторий

git add CheckLists.txt
git status
Закоммитим:
git commit -m "CheckLists.txt"
g

9. На внешнем репозитории сделать Pull Request ветки CheckLists в main
 Нажмем  compare&pull request (merge а внешнем репозитории)
Из ветки Checklists в main
В write напишем коммент
Confern merge

10. Синхронизировать Внешнюю и Локальную ветки Main
git pull